datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
}

// generator custom_generator {
//   provider = "prisma-generator-fake-data"
// }

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  isAdmin  Boolean @default(false)
  isBanned Boolean @default(false)

  riotId    String?
  accountId BigInt?

  role PlayerRole?
  elo  String?

  teams       TeamPlayer[]
  tournaments Tournament[] @relation("TournamentParticipants")

  createdTournaments    Tournament[] @relation("TournamentCreator")
  kickedFromTournaments Tournament[] @relation("KickedPlayers")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum PlayerRole {
  TOP
  JUNGLE
  MID
  ADC
  SUPPORT
  FILL
}

enum TournamentStatus {
  CREATED
  ACCEPTING_PARTICIPANTS
  READY
  FINISHED
}

enum StageType {
  SINGLE_ELIMINATION
}

model TeamPlayer {
  id String @id @default(cuid())

  teamId String
  team   Team   @relation(fields: [teamId], references: [id])

  playerId String
  player   User   @relation(fields: [playerId], references: [id])

  role PlayerRole

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tournament {
  id   String @id @default(cuid())
  name String

  status TournamentStatus @default(CREATED)

  teams        Team[] // Team 1 (5) - Team 2 (5)
  participants User[] @relation("TournamentParticipants")

  createdById String
  createdBy   User   @relation("TournamentCreator", fields: [createdById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  kickedPlayers User[]    @relation("KickedPlayers")
  Bracket       Bracket[]
}

model Team {
  id   String @id @default(cuid())
  name String

  players TeamPlayer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tournament   Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId String?

  brackets Bracket[]
  MatchPlayer MatchPlayer[]
  Match       Match[]
}

model Bracket {
  id   String @id @default(cuid())
  name String
  type StageType

  tournament   Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId String?

  teams Team[]

  rounds Round[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Round {
  id   String @id @default(cuid())
  name String

  isConsolation Boolean @default(false)

  bracket   Bracket? @relation(fields: [bracketId], references: [id])
  bracketId String?

  matches Match[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("BracketRound")
}

model Match {
  id String @id @default(cuid())

  round   Round?  @relation(fields: [roundId], references: [id])
  roundId String?

  players MatchPlayer[]

  isFinished Boolean? @default(false)

  winnerId String?
  winner   Team?   @relation(fields: [winnerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MatchPlayer {
  id String @id @default(cuid())

  match   Match?  @relation(fields: [matchId], references: [id])
  matchId String?

  score Int?

  teamId String
  team   Team   @relation(fields: [teamId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
